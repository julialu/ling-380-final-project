
27,May,2004


	 
      Okay, not really "exciting", but eventful in that I didn't do anything that I usually do. On Sunday I went to the Renaissance festival in Fairburn. That was a wonderful day of escapism, and I bought some really cute stuff. :-) All week my schedule at work has been wonky, but the shifts aren't that bad and I've actually been enjoying myself most of the time. It's totally twilight zone to be sure.  For the past two days I've been preparing to go on vacation by revamping my wardrobe :-D, which is very fun. Shopping relieves stress. Try it if you don't believe me. The only problem is that you end up spending lots of money. Fortunately, I rationalize spending so much on clothes by seeing it as an investment. That makes me feel better and gives me a chance to truly appreciate my job, without which I would be broke and couldn't make "investments". ;-)  All in all, I'm looking forward to work today. I'm looking forward to vacation tomorrow even though the Friday exodus will be brutal. It's a 9 hour drive to the place that we're staying, so the trip will be broken up into like 4 or 5 hours on Friday afternoon and the rest of the way Saturday morning with a stop at (hopefully) a nice motel. I so can't wait to see the ocean and walk on the beach. It's been several years since the last time I went on this little family gathering.
     
    


22,May,2004


	 
      I should never have cut my hair short in the first place. Now I'm miserable because I can't do anything with it and it looks awful. Hair gel helps, but that's only because I'd rather my hair look bad all day than look bad until a breath of wind catches it and makes it look terrible.  So what can I do? Well, I can get an expensive styling and hope for the best, but the last time I did that it didn't work out well. I could cut it REALLY short, but that would still look bad; it would just be easier to maintain. Or I could just give up and let it look awful until it's long enough to tie back again. For now I'm going with the third choice, but I wouldn't be surprised if in a spat of frustration I went and shaved my head. Then at least I could get looks of sympathy from people who think I have cancer...  Maybe I'll just wear a hat for the next year or so.
     
    


20,May,2004


	 
      I think that people must all be on vacation or something. www.cprogramming.com is dead except for a few ongoing threads where the original poster refuses to "get it". IRC isn't hopping much either. I don't feel like programming anything, so I'm pretty much stuck surfing the web trying to find something to do.  What about my friends? Well, they all work during the day, and my shifts are usually at night. Today was my day off, so I just went to the bookstore, had lunch and went home. None of my friends want to go out tonight, so I'm stuck by myself again. When I get bored I lose my train of thought easily. I can't even think of any good way to compose my thoughts, so this blog will be short compared to the others.  Maybe I'll play a game or something...  MEGATOKYO  I finally found volume 1 of Megatokyo at the bookstore today! Good stuff, now I have both of them. Of course, the next one probably won't be out for a long time. Piro isn't well known for doing things quickly. ;-) But that's okay, at least I get my fix of Megatokyo three times a week on average.  CONTEST  I run the contests on www.cprogramming.com. It's a real pain in the butt. I volunteered for the position of contest master some time ago because I had extra time and thought it would be fun. It was fun...for a while. The effort that I had to put into developing a contest, gathering all of the entries and then judging them while under scrutiny of all of the contestants got old very quickly.  I originally planned to run at least one contest a week, but you can imagine how long that lasted. ;-) Now I just don't do anything until somebody asks when the next contest is and I pop up with an idea off the top of my head saying something along the lines of "What a coincidence! I was just finishing this design when you asked." Yes, it's the lazy route and yes people probably hate it, but I've gotten out of my contest master phase.  One of the reasons I've been going to Cprogramming so long is that I don't have any obligation to. It's purely a volunteer effort in my spare time, not a job. If it were a job then I wouldn't want to go and I'd find something else to do. That's why I refused the super-moderator position when they offered it to me. It wouldn't be a job, but it would feel enough like I had to be there that all the fun would be lost.
     
    


19,May,2004


	 
      Well, my new book is pretty good for the most part. I did have to ignore the author's fundamental misunderstanding of the relationship between arrays and pointers in C though. He insisted on saying that arrays are "just" constant pointers to a block of memory of size N * sizeof(T). Naturally that's silly. How would the sizeof operator work if this were true? It would return the size of a pointer, not the array as a whole. The fundamental misunderstanding is concerning objects and values. An array in object context, such as an operand of the sizeof or address-of operator, yields the complete object and everything works as it should. Everywhere else is considered a value context, where an array name becomes a pointer to the initial element of the array. So the author's over-simplified stance ends up being very wrong.  I was a bit disappointed by the chapter on memory leaks and debugging them. The author gave good advice, but it was far from complete. It missed some elegance too considering the fact that the book does mention C99. It explained the details of an ugly as sin TRACE/RETURN macro set that looked like this:  const char *LOC; #define TRACE(a) LOC=#a; #define RETURN return; #define RETURN1(a) return(a); #define FILELOC(0) LOC  Now, I'll go through this line by line so that you can see just how terrible this is. The first line creates an externally linked statically allocated variable. The naming scheme is bad because identifiers with all capital names are reserved for macro names by common convention. I don't like the idea of using a global variable without a (very!) good reason either, so I'm a little biased against this use because it could be done better.  The second line creates a trace macro that assigns the stringized contents of the macro argument to LOC. The idea is to save useful information in LOC such as the name of the function being executed at the time. The first thing I noticed is that there's a trailing semicolon. That changes the expected syntax of a function-like macro. Users will correctly try to use it like this:  TRACE(function-name);  But others may safely omit the trailing semicolon to get this:  TRACE(function-name)  And everything will still work properly even though it doesn't look right. I believe that macros should merge as much as possible with the syntax of the rest of the language. If the use of a macro looks awkward or incorrect, it's a poorly designed macro. I also don't think the author really understands how the preprocessor works in C, but I'll get to that in a moment.  The next line defines a RETURN macro that returns a void expression. I can only assume that this is the bare bones macro for something more useful, such as:   /* Blogger sucks, pretend line continuation is there ;-) */ #define RETURN   do {     fprintf(stderr, "Exiting %s\n", LOC);     return;   } while (0) &nbsp   ... Of course, with the author's apparent lack of knowledge when it comes to the preprocessor, it may just be a dumb macro used for symmetry with the TRACE macro. I can understand and relate to the first speculation, but not the second.  The RETURN1 macro is an "overloaded" macro that returns a value from functions instead of a void expression as RETURN does. Since symbol overloading isn't possible with the preprocessor, this is understandable as long as there's a good reason for the return macros.  The last macro is the one that proves the author really doesn't know what's going on. It's a syntax error. A macro identifier list is still and identifier list and requires valid identifiers, which cannot begin with a digit. What the author really wanted was a function-like macro that takes no arguments. What he doesn't know is that an empty identifier list is perfectly legal in C:  #define FILELOC() LOC  Even worse, the value of LOC will change permanently. This means that if you want the old value of LOC to simulate the pushing and popping of activation records, you need to save it manually. In other words, this won't work right:   #include &ltstdio.h

17,May,2004


	 
      I was browsing the nearest bookstores (yes, plural!) for anything interesting concerning programming and I think I may have stumbled across a gem. Usually the books are either "Let's write a program!" beginner stuff that I was embarrassed to read even when I actually was a beginner, or intermediate topics such as reference manuals, algorithms and data structures (the useful ones that don't fall into the first category), or books claiming to be advanced that really aren't. I've gotten used to trolling for the odd tidbit of good stuff in otherwise average books. Still, there are a few that stand out and shine, like Knuth's "The Art of Computer Programming" series, Bentley's "Programming Pearls", K&R, Stroustrup, "Programming Perl", etc...  I've noticed my interests taking different turns as I learned more and more about programming. First, I was concerned with purely syntactic issues and stuck with language primers and reference manuals. Then I moved on to more interesting semantic issues with algorithms and data structures, then I found software design in general interesting. Now I'm working on solidifying my advanced knowledge of fundamentals, which is what drew me to "Memory as a Programming Concept in C and C++" by Frantisek Franek. The topic is frighteningly fascinating, and hits home for me especially. For those who know C and read my last post, you'll notice that I put a lot of effort into defensive programming. Most of that effort is spent on memory related issues.  From the first few chapters, it looks to be a great book. I do have one bone to pick with the author though. He actually used void as the return type for main in a C program. That's a huge no-no unless the restrictions of the ANSI/ISO standard are removed by running on a freestanding (ie. embedded) implementation. Because the program in question used a standard library function that wasn't guaranteed to be available on a freestanding implementation, I have no choice but to assume that he was assuming a hosted implementation (especially considering the topic of the operating system loading binaries in a process). So he doesn't know standard C as well as I would hope. He also assumed shortly after that vanilla char is unsigned. I'm hopeful that the book doesn't make such blatant assumptions elsewhere, because that would seriously effect its usefulness to me. Fortunately, I can look past minor things like that as long as I'm alert. But I'd rather read a book like Knuth where I can be reasonably sure that everything is precise and accurate.  Sadly, the book is short, less than 300 pages. I'll probably fly through it a few times before the week is done. Assuming it's as good as I'm hoping that is. :-)  ROBIN'S A LIAR  I don't think of myself as a liar as much as a roleplayer. Let me explain. I see the internet as one big game. The big game has little games and you play different roles in each game. Some games consist solely of your persona and another game, like XWing: Alliance on the MSN Gaming Zone. I like to change personas a lot just for variety and to satisfy some perverse interest in communal psychological relationships. To make a long explanation shorter, I make up people, personalities, histories and such to see how others react to me while playing the game. Yes, I do pretend to be a guy quite a bit...  Now, most of the time this is fun and I enjoy it very much. But there's one persona that I just can't seem to get away from. I can't kill it because I've developed a lot of respect while wearing it, I can't come out with the truth for the same reason, and I've really gone overboard with the story telling. Worse yet, it's on a programming message board where the moderators are anal about checking IP addresses and such. So I've probably been noticed trying to use different accounts to test out different personas.  This message board is a place that I go to on a sub-daily basis, and I'd really like to just be myself because it's hard being the persona that I've cultivated, and her programming style is different enough from mine that I can't always catch inconsistencies. Of course, everyone there respects her for being a professional programmer with plenty of experience (which is a far cry from the real me) and for being blatantly honest. Naturally, I don't think the reactions would be good if they found out that I was lying through my teeth most of the time. But my programming knowledge matches hers because I was trying my best when answering questions.  I've been working on a new persona, but that isn't working out well. Now I'm seriously considering dumping that one and either telling the truth with the one I've used the most or making a new account that's the real me and dumping Prelude (that's her handle). Like most of my personas that get dumped, she'll just vanish and never come back, which is a pity because I put a lot of effort into her and everything she did for two years. The only other persona that's lasted as long is my oldest XWing: Alliance persona.  Telling the truth would hurt. A lot. I can only imagine the reactions, and of course they would never believe another thing I said even if I told the absolute truth. Worse, I respect quite a few people there and I really don't want them looking down on me. I'd probably be ridiculed every time I showed up and have to leave completely because they could always find out who I was no matter what account I used.  I really hope this book is good...
     
    


16,May,2004


	 
      WEEKENDS BITE!  I must be the only person the planet Earth that hates weekends. I have good reasons though, let me walk you through a typical weekend for me. I wake up (generally) around 9:00am, or later if I was tired. I always stay up late on Friday night watching the standup comedians on Comedy Central and I almost never miss watching CSI. I'll get up and cross the eleven inches between my bed and my computer to dive, program, walk newsgroups, etc... I do that for about three hours, at which time I have to get ready for work at 1:00pm. Everything is still okay, though at this point I'm dreading work.  I'll leave what happens at work up to the imagination, but let's just say that it consists of smiling and being bubbly while trying not to smack dumb people silly. And that's the good customers. It gets very stressful when they feel that they've been slighted and try to get free stuff by being the classic "irate customer". For the most part they get angry about things that happen before I even come to work that I don't know about and had nothing to do with. Naturally, my ignorance about their situation only succeeds in fueling their rage even more. But if I'm lucky I'll be asked to do data entry for the customer database.  I hate data entry. It's boring and tedious where I like mentally stimulating and enjoyable. Of course, I'm the "computer expert" among the employees, so naturally my boss thinks I enjoy getting carpal tunnel by entering names of people I hate (about 50 or 60 each records for each sitting) into a database. But, I hate customer service more than data entry, so I'll jump at the chance to get an hour or two of uninterrupted thought and relaxation while at work.  By about the third hour I'm half-seriously considering suicide. Well, not seriously at all, but it begins to look more attractive. All in all, I have to work ten hours on Saturday. I show up reluctantly at 1:00pm and lock everything up at 11:00pm. Even better, for the last four hours I'm usually all alone. Not only does that mean I have no one to palm off annoying customers on, it also increases the fear factor of getting robbed, violated and killed. Fortunately I get a reprieve at 11:00pm. I get to go home, take a shower, and what could only be considered a nap.  On Sunday, I have to get up at 4:30am so that I can be at work at 5:30am to open everything up and be ready for business (aka. my own personal hell) at 6:00am. So, assuming I go to bed about midnight (which is typical) and fall asleep the instant my head hits the pillow, I get a grand total of four and a half hours of sleep.  Now, I have no problem waking up. I can jump out of bed and be wide awake without any help at all, I don't even drink coffee. But lack of sleep makes me irritable. So unless very few customers come in between the time I open and about noon, I end up in a VERY bad mood on Sunday. Repeat Saturday's list of things that happen for another ten hours and I leave work at 4:00pm, but it's ten or fifteen after most of the time because the relief shift is usually late. That's my weekend.  Granted, I do have the rest of the day after I get off to do stuff, but I'm usually in too bad of a mood to go out with friends or be anything but a couch potato, one of those people you see at the gym that you don't want to approach because they look ticked off, or a jerk online. Xwing: Alliance is an outlet for my stress, so I'm well known for being an ass. It doesn't help that I win all of the games I play either, because a skilled player is untouchable. You can be a jerk and when they start whining, just say that they're bitter because you schooled them. :-) I'm really a nice person though. I'm just a victim of the surrounding environment most of the time...  SKIP LIST  I was coding idly on Friday when I discovered that I was writing the data types for a skip list. Apparently my subconscience was more interested in writing that library than I was. Who am I to argue with myself? So I actually put some effort into it and came up with something pretty good. Okay, it's nothing earth shattering, just a basic type independent library that implements the basic operations (insert/remove/search) in C. I didn't even come up with my own algorithms, I just stole them from William Pugh's original report on skip lists. Here's the demo that I used to test everything out before libizing everything. Note that the blogger will probably butcher my formatting or make it impossible to cut and paste properly.   /*   Copyright (C) 2004 Robin Cole &nbsp   - Created (5/14/2004) Robin Cole   - Final touches (5/15/2004) Robin Cole &nbsp   xlist - Skip list demo implementation &nbsp   Dependencies: Expects xitem and xitem.h to exist */ #include &ltassert.h

14,May,2004


	 
      I woke up early again today. 6:40 is really early for me, even on days that I have to work. I don't know why, maybe it's just getting lighter earlier and that keeps waking me up. But it's never been a problem before.  Because I was wide awake, I decided to get up and do some net diving. The usual activities ensue. I checked out www.megatokyo.com and found it updated (Woohoo!), then went through my newsgroups and message boards to answer programming questions. When I ran out of questions, I had half of an inkling to write a skip list library to pass the time.  Skip lists are really simple. I can usually get them right on the first try, so writing a generic library for future use would be a good idea. I'm just not sure if I would use it because, like most programmers, I prefer absolute guarantees rather than probabilistic "expected" performance, "but only if the random numbers are good". Okay, so skip lists aren't perfect, but they are better than basic linked lists and much easier to work with than balanced trees.  Of course, I'm still lazy, and an inkling doesn't have enough pull to get me to write something more complex than a little example program to answer a question. At least by answering questions I can show off what I know and can do without looking like an egomaniac. I like it when people praise me, but it's hard to get that fix without also having people look down on me for arrogance. I do have a big ego, but I don't flaunt it. Really! Well, except when I'm schooling people in Xwing: Alliance. :-)  I'm kind of depressed because I don't have anything to do or occupy my mind with. Hell, I don't even have an interesting fantasy to keep my imagination from jumping around a lot. Fantasies have been my way of fighting boredom for as long as I can remember. When I run out of good ideas for all of my fantasies, I get depressed because the boredom really starts to set in. Time goes slower too. Even more so because I'm usually at work when this happens. What really sucks is that it's been happening most of the time, so I end up feeling depressed about my life because I can't hide in my imagination.  I loathe having nothing to occupy my mind. If I'm not thinking about something interesting, it irritates me greatly and I get a little bitchy. Writing a good library would probably give me something to work mull over, but not a skip list. I've done that before and solved the problems that are interesting. But I can't think of any good library that would interest me right now.   I have to go to work today. That should be "fun". I've been working at the same place for over eight years now. That's a long time. Long enough to be really good at everything I do, but also long enough to become jaded and bitter. I work directly with customers, which is ironic because I don't work well with other people (that's probably why people rarely take an interest in me romantically, it's not like I'm not a good catch or anything). Well, I can go in to work in a fantastic mood and leave work totally pissed off. That's how much the customers chafe against my personality. It's likely because I know how this stuff works and I can use it properly that I see customers as idiots. I mean, how hard is it to locate and press a flashing button that's right in front of your face?  All I ask is that the next two weeks pass quickly so that I can go on a week vacation. At least that way I can justify having nothing to think about. That's what vacations are for, right? Clearing your mind of distractions and relaxing on a beach while working on your tan. I may not even take my laptop...
     
    


13,May,2004


	 
      I originally planned to use blogs as an outlet for my angst riddled thoughts. So naturally, when I set up my blog I found that I was in a good mood and had a pretty good day. Of course, I still have to go to work tomorrow and all weekend after that. Joy.  I woke up surprisingly early today for no obvious reasons. I remember that the power went out for a few seconds and woke me up about 3am, but I woke up again at about 6:30am and was so wide awake that I slinked out of bed and played around on my computer. I was planning on fiddling around with a problem that was clearly easy, yet I couldn't manage to get it to work perfectly.  THE TREE  The night before I had been working on the DSW algorithm for balancing a binary search tree. The first attempt was composed of my own understanding of the algorithm which turned out to be correct, but still wouldn't work. The second attempt was blatant plagiarism from the original ACM article depicting the algorithm in Pascal (I was working with C though). Strangely enough, the "official" algorithm gave me the same problems. It would work alright for a degenerate tree until about the 24th item and then die with a segmentation violation. That was strange enough because my code oozes defenses against such things.  The third incarnation was a character for character copy of Ben Pfaff's (He's my binary search tree hero) libavl balancing method. It uses the same basic algorithm as I had been working on. I was hoping that his unique idea for calculating the number of leaves before reconstructing a balanced tree from the vine would give me insight. Unfortunately I had the same problems as the other two attempts. Because my code is always perfect, I knew it couldn't possibly be anything else... Okay, that's a lie. My code is only perfect on the third or fourth try with something nontrivial. But this particular binary search tree was trivial, and I've written it a hundred times before and I tested it thoroughly. So I'm sure enough that it's correct.  Well, I ended up getting pissed and throwing away everything I had in favor of a crappier approach that I knew for a fact I could get right on the first try. I wrote a balancing routine that copied the tree in order to a dynamic array and then rebalanced the tree by removing all of the items and reinserting them from a binary search on the array. Not the best solution, but it's still technically O(n) performance-wise.  I finally got it working on the third try. I think because I was pissed off to begin with I missed a few subtle yet important details, like trying to reassign the pointer passed to the rebalance function and expecting the changes to persist back to the calling function. I ended up rewriting it once before noticing that (by that time I had cooled off I believe). So the rebalance routine now works, and I set up the tree to rebalance itself when the depth of the path taken to insert a new item exceeds log(tree-


